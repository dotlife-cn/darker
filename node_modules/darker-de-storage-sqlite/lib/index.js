/*jshint node:true */
'use strict';

var util = require('util');
var events = require('events');
var debug = require('debug')('storage:de:sqlite');
var sqlite3 = require('sqlite3').verbose();
var DomainEventStorageBase = require('../../darker-core').cqrs.DomainEventStorageBase;

var SqliteDomainEventStorage = function(options) {
    DomainEventStorageBase.call(this, options);

    //this.db = new sqlite3.Database(':memory:');
    this.db = new sqlite3.Database('/Users/tony/project/nodejs/darker/runtime/data/domainevents.sqlite');
};
util.inherits(SqliteDomainEventStorage, DomainEventStorageBase);

SqliteDomainEventStorage.prototype.get = function(id) {

};

SqliteDomainEventStorage.prototype.saveEvents = function(events) {
    var self = this;
    debug('save events to sqlite, count: %d', events.length);
    this.db.serialize(function() {
        var stmt = self.db.prepare("INSERT INTO darker_domainevents VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
        events.forEach(function(event) {
           stmt.run(event.id, event.sourceId, event.sourceType, event.timestamp, event.version, event.branch, event.eventType, event.data);
        });
        stmt.finalize();
    });
};

SqliteDomainEventStorage.prototype.saveEvent = function(event) {
    var self = this;
    debug('save event to sqlite');
    this.db.serialize(function() {
        var stmt = self.db.prepare("INSERT INTO darker_domainevents VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
        stmt.run(event.id, event.sourceId, event.sourceType, event.timestamp, event.version, event.branch, event.eventType, event.data);
        stmt.finalize();
    });
};

SqliteDomainEventStorage.prototype.rollback = function(eventId, fn) {
    var self = this;
    this.db.serialize(function() {
        var sql = "delete from darker_domainevents where id=?";
        self.db.run(sql, eventId, fn);
    });
};

SqliteDomainEventStorage.prototype.purge = function(aggregateRootId, fn) {
    var self = this;
    this.db.serialize(function() {
        var sql = "delete from darker_domainevents where sourceId=?";
        self.db.run(sql, aggregateRootId, fn);
    });
};

SqliteDomainEventStorage.prototype.loadEvents = function(aggregateRootId, aggregateRootType, version, fn) {
    var self = this;
    this.db.serialize(function() {
        var sql = "select * from darker_domainevents where aggregateRootId=? and aggregateRootType=? and version>=?";
        self.db.all(sql, aggregateRootId, aggregateRootType, version, fn);
    });
};

SqliteDomainEventStorage.prototype.createSnapshot = function(snapshot, fn) {
    var self = this;
    debug('save snapshot to sqlite');
    this.db.serialize(function() {
        var stmt = self.db.prepare("INSERT INTO darker_snapshot VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
        stmt.run(snapshot.id, snapshot.data, snapshot.aggregateRootId,
            snapshot.aggregateRootType, snapshot.type, snapshot.version, snapshot.branch);
        stmt.finalize(fn);
    });
};

SqliteDomainEventStorage.prototype.fetchSnapshot = function(aggregateRootId, aggregateRootType, fn) {
    var self = this;
    this.db.serialize(function() {
        var sql = "select * from darker_domainevents where aggregateRootId=? and aggregateRootType=? order by id desc limit 1";
        self.db.get(sql, aggregateRootId, aggregateRootType, fn);
    });
};

exports = module.exports = SqliteDomainEventStorage;